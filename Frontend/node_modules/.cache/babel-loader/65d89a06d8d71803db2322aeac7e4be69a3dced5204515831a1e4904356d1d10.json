{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PC\\\\monat-website\\\\src\\\\components\\\\Navbar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './Navbar.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Navbar = () => {\n  _s();\n  const [activeRound, setActiveRound] = useState('Connect');\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showHint, setShowHint] = useState(false);\n  const searchInputRef = useRef(null);\n  const handleHover = item => {\n    setActiveRound(item === 'Connect' ? 'Folder' : 'Connect');\n  };\n  useEffect(() => {\n    const handleKeyPress = event => {\n      if (event.key === '/' && !isSearchOpen) {\n        event.preventDefault();\n        setIsSearchOpen(true);\n        setTimeout(() => {\n          var _searchInputRef$curre;\n          return (_searchInputRef$curre = searchInputRef.current) === null || _searchInputRef$curre === void 0 ? void 0 : _searchInputRef$curre.focus();\n        }, 100);\n      } else if (event.key === 'Escape' && isSearchOpen) {\n        setIsSearchOpen(false);\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n\n    // Show hint after a delay\n    const timer = setTimeout(() => {\n      setShowHint(true);\n    }, 1000);\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearTimeout(timer);\n    };\n  }, [isSearchOpen]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [showHint && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `shortcut-hint ${showHint ? 'visible' : ''}`,\n      children: \"Press \\\"/\\\" for company :)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"navbar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Navbar, \"MI/I7mB9SpYFGGVKBDn2Gmpci4A=\");\n_c = Navbar;\nexport default Navbar;\nvar _c;\n$RefreshReg$(_c, \"Navbar\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","Navbar","_s","activeRound","setActiveRound","isSearchOpen","setIsSearchOpen","searchTerm","setSearchTerm","showHint","setShowHint","searchInputRef","handleHover","item","handleKeyPress","event","key","preventDefault","setTimeout","_searchInputRef$curre","current","focus","document","addEventListener","timer","removeEventListener","clearTimeout","children","className","fileName","_jsxFileName","lineNumber","columnNumber","id","_c","$RefreshReg$"],"sources":["C:/Users/PC/monat-website/src/components/Navbar.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './Navbar.css';\n\nconst Navbar = () => {\n  const [activeRound, setActiveRound] = useState('Connect');\n  const [isSearchOpen, setIsSearchOpen] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [showHint, setShowHint] = useState(false);\n  const searchInputRef = useRef(null);\n\n  const handleHover = (item) => {\n    setActiveRound(item === 'Connect' ? 'Folder' : 'Connect');\n  };\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === '/' && !isSearchOpen) {\n        event.preventDefault();\n        setIsSearchOpen(true);\n        setTimeout(() => searchInputRef.current?.focus(), 100);\n      } else if (event.key === 'Escape' && isSearchOpen) {\n        setIsSearchOpen(false);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyPress);\n\n    // Show hint after a delay\n    const timer = setTimeout(() => {\n      setShowHint(true);\n    }, 1000);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyPress);\n      clearTimeout(timer);\n    };\n  }, [isSearchOpen]);\n\n  return (\n    <>\n      {/* Add a conditional check to ensure the hint is rendered */}\n      {showHint && (\n        <div className={`shortcut-hint ${showHint ? 'visible' : ''}`}>\n          Press \"/\" for company :)\n        </div>\n      )}\n      <header id=\"navbar\">\n        {/* ... rest of your navbar code ... */}\n      </header>\n    </>\n  );\n};\n\nexport default Navbar;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEtB,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,SAAS,CAAC;EACzD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAMiB,cAAc,GAAGf,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMgB,WAAW,GAAIC,IAAI,IAAK;IAC5BT,cAAc,CAACS,IAAI,KAAK,SAAS,GAAG,QAAQ,GAAG,SAAS,CAAC;EAC3D,CAAC;EAEDlB,SAAS,CAAC,MAAM;IACd,MAAMmB,cAAc,GAAIC,KAAK,IAAK;MAChC,IAAIA,KAAK,CAACC,GAAG,KAAK,GAAG,IAAI,CAACX,YAAY,EAAE;QACtCU,KAAK,CAACE,cAAc,CAAC,CAAC;QACtBX,eAAe,CAAC,IAAI,CAAC;QACrBY,UAAU,CAAC;UAAA,IAAAC,qBAAA;UAAA,QAAAA,qBAAA,GAAMR,cAAc,CAACS,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,KAAK,CAAC,CAAC;QAAA,GAAE,GAAG,CAAC;MACxD,CAAC,MAAM,IAAIN,KAAK,CAACC,GAAG,KAAK,QAAQ,IAAIX,YAAY,EAAE;QACjDC,eAAe,CAAC,KAAK,CAAC;MACxB;IACF,CAAC;IAEDgB,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAET,cAAc,CAAC;;IAEpD;IACA,MAAMU,KAAK,GAAGN,UAAU,CAAC,MAAM;MAC7BR,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAM;MACXY,QAAQ,CAACG,mBAAmB,CAAC,SAAS,EAAEX,cAAc,CAAC;MACvDY,YAAY,CAACF,KAAK,CAAC;IACrB,CAAC;EACH,CAAC,EAAE,CAACnB,YAAY,CAAC,CAAC;EAElB,oBACEP,OAAA,CAAAE,SAAA;IAAA2B,QAAA,GAEGlB,QAAQ,iBACPX,OAAA;MAAK8B,SAAS,EAAE,iBAAiBnB,QAAQ,GAAG,SAAS,GAAG,EAAE,EAAG;MAAAkB,QAAA,EAAC;IAE9D;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACN,eACDlC,OAAA;MAAQmC,EAAE,EAAC;IAAQ;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEX,CAAC;EAAA,eACT,CAAC;AAEP,CAAC;AAAC9B,EAAA,CAhDID,MAAM;AAAAiC,EAAA,GAANjC,MAAM;AAkDZ,eAAeA,MAAM;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}